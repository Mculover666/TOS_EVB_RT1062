<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TOS_EVB_RT1062.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TOS_EVB_RT1062.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Wed Jun 30 19:52:12 2021
<BR><P>
<H3>Maximum Stack Usage =        472 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; sdcard_init &rArr; SD_CardInit &rArr; SD_ReadStatus &rArr; SD_PollingCardStatusBusy &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr;  SD_PollingCardStatusBusy (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[85]">ACMP1_IRQHandler</a>
 <LI><a href="#[86]">ACMP2_IRQHandler</a>
 <LI><a href="#[87]">ACMP3_IRQHandler</a>
 <LI><a href="#[88]">ACMP4_IRQHandler</a>
 <LI><a href="#[4d]">ADC1_IRQHandler</a>
 <LI><a href="#[4e]">ADC2_IRQHandler</a>
 <LI><a href="#[83]">ADC_ETC_ERROR_IRQ_IRQHandler</a>
 <LI><a href="#[80]">ADC_ETC_IRQ0_IRQHandler</a>
 <LI><a href="#[81]">ADC_ETC_IRQ1_IRQHandler</a>
 <LI><a href="#[82]">ADC_ETC_IRQ2_IRQHandler</a>
 <LI><a href="#[41]">BEE_IRQHandler</a>
 <LI><a href="#[4]">BusFault_Handler</a>
 <LI><a href="#[69]">CCM_1_IRQHandler</a>
 <LI><a href="#[6a]">CCM_2_IRQHandler</a>
 <LI><a href="#[1d]">CORE_IRQHandler</a>
 <LI><a href="#[35]">CSI_IRQHandler</a>
 <LI><a href="#[3b]">CSU_IRQHandler</a>
 <LI><a href="#[1b]">CTI0_ERROR_IRQHandler</a>
 <LI><a href="#[1c]">CTI1_ERROR_IRQHandler</a>
 <LI><a href="#[4f]">DCDC_IRQHandler</a>
 <LI><a href="#[3c]">DCP_IRQHandler</a>
 <LI><a href="#[3d]">DCP_VMI_IRQHandler</a>
 <LI><a href="#[bc]">DMA_ERROR_DriverIRQHandler</a>
 <LI><a href="#[7]">DebugMon_Handler</a>
 <LI><a href="#[a8]">DefaultISR</a>
 <LI><a href="#[8b]">ENC1_IRQHandler</a>
 <LI><a href="#[8c]">ENC2_IRQHandler</a>
 <LI><a href="#[8d]">ENC3_IRQHandler</a>
 <LI><a href="#[8e]">ENC4_IRQHandler</a>
 <LI><a href="#[dd]">ENET2_1588_Timer_DriverIRQHandler</a>
 <LI><a href="#[db]">ENET_1588_Timer_DriverIRQHandler</a>
 <LI><a href="#[68]">EWM_IRQHandler</a>
 <LI><a href="#[30]">FLEXRAM_IRQHandler</a>
 <LI><a href="#[d6]">FLEXSPI2_DriverIRQHandler</a>
 <LI><a href="#[6b]">GPC_IRQHandler</a>
 <LI><a href="#[5a]">GPIO1_Combined_0_15_IRQHandler</a>
 <LI><a href="#[5b]">GPIO1_Combined_16_31_IRQHandler</a>
 <LI><a href="#[52]">GPIO1_INT0_IRQHandler</a>
 <LI><a href="#[53]">GPIO1_INT1_IRQHandler</a>
 <LI><a href="#[54]">GPIO1_INT2_IRQHandler</a>
 <LI><a href="#[55]">GPIO1_INT3_IRQHandler</a>
 <LI><a href="#[56]">GPIO1_INT4_IRQHandler</a>
 <LI><a href="#[57]">GPIO1_INT5_IRQHandler</a>
 <LI><a href="#[58]">GPIO1_INT6_IRQHandler</a>
 <LI><a href="#[59]">GPIO1_INT7_IRQHandler</a>
 <LI><a href="#[5c]">GPIO2_Combined_0_15_IRQHandler</a>
 <LI><a href="#[5d]">GPIO2_Combined_16_31_IRQHandler</a>
 <LI><a href="#[5e]">GPIO3_Combined_0_15_IRQHandler</a>
 <LI><a href="#[5f]">GPIO3_Combined_16_31_IRQHandler</a>
 <LI><a href="#[60]">GPIO4_Combined_0_15_IRQHandler</a>
 <LI><a href="#[61]">GPIO4_Combined_16_31_IRQHandler</a>
 <LI><a href="#[62]">GPIO5_Combined_0_15_IRQHandler</a>
 <LI><a href="#[63]">GPIO5_Combined_16_31_IRQHandler</a>
 <LI><a href="#[a7]">GPIO6_7_8_9_IRQHandler</a>
 <LI><a href="#[33]">GPR_IRQ_IRQHandler</a>
 <LI><a href="#[6e]">GPT1_IRQHandler</a>
 <LI><a href="#[6f]">GPT2_IRQHandler</a>
 <LI><a href="#[31]">KPP_IRQHandler</a>
 <LI><a href="#[34]">LCDIF_IRQHandler</a>
 <LI><a href="#[3]">MemManage_Handler</a>
 <LI><a href="#[84]">PIT_IRQHandler</a>
 <LI><a href="#[47]">PMU_EVENT_IRQHandler</a>
 <LI><a href="#[70]">PWM1_0_IRQHandler</a>
 <LI><a href="#[71]">PWM1_1_IRQHandler</a>
 <LI><a href="#[72]">PWM1_2_IRQHandler</a>
 <LI><a href="#[73]">PWM1_3_IRQHandler</a>
 <LI><a href="#[74]">PWM1_FAULT_IRQHandler</a>
 <LI><a href="#[93]">PWM2_0_IRQHandler</a>
 <LI><a href="#[94]">PWM2_1_IRQHandler</a>
 <LI><a href="#[95]">PWM2_2_IRQHandler</a>
 <LI><a href="#[96]">PWM2_3_IRQHandler</a>
 <LI><a href="#[97]">PWM2_FAULT_IRQHandler</a>
 <LI><a href="#[98]">PWM3_0_IRQHandler</a>
 <LI><a href="#[99]">PWM3_1_IRQHandler</a>
 <LI><a href="#[9a]">PWM3_2_IRQHandler</a>
 <LI><a href="#[9b]">PWM3_3_IRQHandler</a>
 <LI><a href="#[9c]">PWM3_FAULT_IRQHandler</a>
 <LI><a href="#[9d]">PWM4_0_IRQHandler</a>
 <LI><a href="#[9e]">PWM4_1_IRQHandler</a>
 <LI><a href="#[9f]">PWM4_2_IRQHandler</a>
 <LI><a href="#[a0]">PWM4_3_IRQHandler</a>
 <LI><a href="#[a1]">PWM4_FAULT_IRQHandler</a>
 <LI><a href="#[36]">PXP_IRQHandler</a>
 <LI><a href="#[67]">RTWDOG_IRQHandler</a>
 <LI><a href="#[6d]">Reserved115_IRQHandler</a>
 <LI><a href="#[89]">Reserved143_IRQHandler</a>
 <LI><a href="#[8a]">Reserved144_IRQHandler</a>
 <LI><a href="#[a5]">Reserved171_IRQHandler</a>
 <LI><a href="#[3e]">Reserved68_IRQHandler</a>
 <LI><a href="#[48]">Reserved78_IRQHandler</a>
 <LI><a href="#[50]">Reserved86_IRQHandler</a>
 <LI><a href="#[51]">Reserved87_IRQHandler</a>
 <LI><a href="#[77]">SEMC_IRQHandler</a>
 <LI><a href="#[40]">SJC_IRQHandler</a>
 <LI><a href="#[38]">SNVS_HP_WRAPPER_IRQHandler</a>
 <LI><a href="#[39]">SNVS_HP_WRAPPER_TZ_IRQHandler</a>
 <LI><a href="#[3a]">SNVS_LP_WRAPPER_IRQHandler</a>
 <LI><a href="#[6c]">SRC_IRQHandler</a>
 <LI><a href="#[49]">TEMP_LOW_HIGH_IRQHandler</a>
 <LI><a href="#[4a]">TEMP_PANIC_IRQHandler</a>
 <LI><a href="#[8f]">TMR1_IRQHandler</a>
 <LI><a href="#[90]">TMR2_IRQHandler</a>
 <LI><a href="#[91]">TMR3_IRQHandler</a>
 <LI><a href="#[92]">TMR4_IRQHandler</a>
 <LI><a href="#[3f]">TRNG_IRQHandler</a>
 <LI><a href="#[32]">TSC_DIG_IRQHandler</a>
 <LI><a href="#[7b]">USB_OTG1_IRQHandler</a>
 <LI><a href="#[7a]">USB_OTG2_IRQHandler</a>
 <LI><a href="#[4b]">USB_PHY1_IRQHandler</a>
 <LI><a href="#[4c]">USB_PHY2_IRQHandler</a>
 <LI><a href="#[5]">UsageFault_Handler</a>
 <LI><a href="#[66]">WDOG1_IRQHandler</a>
 <LI><a href="#[37]">WDOG2_IRQHandler</a>
 <LI><a href="#[7e]">XBAR1_IRQ_0_1_IRQHandler</a>
 <LI><a href="#[7f]">XBAR1_IRQ_2_3_IRQHandler</a>
 <LI><a href="#[1]">NMI_Handler</a>
 <LI><a href="#[2]">HardFault_Handler</a>
 <LI><a href="#[6]">SVC_Handler</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[a]">DMA0_DMA16_IRQHandler</a>
 <LI><a href="#[b]">DMA1_DMA17_IRQHandler</a>
 <LI><a href="#[c]">DMA2_DMA18_IRQHandler</a>
 <LI><a href="#[d]">DMA3_DMA19_IRQHandler</a>
 <LI><a href="#[e]">DMA4_DMA20_IRQHandler</a>
 <LI><a href="#[f]">DMA5_DMA21_IRQHandler</a>
 <LI><a href="#[10]">DMA6_DMA22_IRQHandler</a>
 <LI><a href="#[11]">DMA7_DMA23_IRQHandler</a>
 <LI><a href="#[12]">DMA8_DMA24_IRQHandler</a>
 <LI><a href="#[13]">DMA9_DMA25_IRQHandler</a>
 <LI><a href="#[14]">DMA10_DMA26_IRQHandler</a>
 <LI><a href="#[15]">DMA11_DMA27_IRQHandler</a>
 <LI><a href="#[16]">DMA12_DMA28_IRQHandler</a>
 <LI><a href="#[17]">DMA13_DMA29_IRQHandler</a>
 <LI><a href="#[18]">DMA14_DMA30_IRQHandler</a>
 <LI><a href="#[19]">DMA15_DMA31_IRQHandler</a>
 <LI><a href="#[1a]">DMA_ERROR_IRQHandler</a>
 <LI><a href="#[1e]">LPUART1_IRQHandler</a>
 <LI><a href="#[1f]">LPUART2_IRQHandler</a>
 <LI><a href="#[20]">LPUART3_IRQHandler</a>
 <LI><a href="#[21]">LPUART4_IRQHandler</a>
 <LI><a href="#[22]">LPUART5_IRQHandler</a>
 <LI><a href="#[23]">LPUART6_IRQHandler</a>
 <LI><a href="#[24]">LPUART7_IRQHandler</a>
 <LI><a href="#[25]">LPUART8_IRQHandler</a>
 <LI><a href="#[26]">LPI2C1_IRQHandler</a>
 <LI><a href="#[27]">LPI2C2_IRQHandler</a>
 <LI><a href="#[28]">LPI2C3_IRQHandler</a>
 <LI><a href="#[29]">LPI2C4_IRQHandler</a>
 <LI><a href="#[2a]">LPSPI1_IRQHandler</a>
 <LI><a href="#[2b]">LPSPI2_IRQHandler</a>
 <LI><a href="#[2c]">LPSPI3_IRQHandler</a>
 <LI><a href="#[2d]">LPSPI4_IRQHandler</a>
 <LI><a href="#[2e]">CAN1_IRQHandler</a>
 <LI><a href="#[2f]">CAN2_IRQHandler</a>
 <LI><a href="#[42]">SAI1_IRQHandler</a>
 <LI><a href="#[43]">SAI2_IRQHandler</a>
 <LI><a href="#[44]">SAI3_RX_IRQHandler</a>
 <LI><a href="#[45]">SAI3_TX_IRQHandler</a>
 <LI><a href="#[46]">SPDIF_IRQHandler</a>
 <LI><a href="#[64]">FLEXIO1_IRQHandler</a>
 <LI><a href="#[65]">FLEXIO2_IRQHandler</a>
 <LI><a href="#[75]">FLEXSPI2_IRQHandler</a>
 <LI><a href="#[76]">FLEXSPI_IRQHandler</a>
 <LI><a href="#[78]">USDHC1_IRQHandler</a>
 <LI><a href="#[79]">USDHC2_IRQHandler</a>
 <LI><a href="#[7c]">ENET_IRQHandler</a>
 <LI><a href="#[a2]">ENET2_IRQHandler</a>
 <LI><a href="#[a3]">ENET2_1588_Timer_IRQHandler</a>
 <LI><a href="#[a4]">CAN3_IRQHandler</a>
 <LI><a href="#[a6]">FLEXIO3_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1ad]">SD_Transfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a1]">SD_PollingCardStatusBusy</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[85]">ACMP1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[86]">ACMP2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[87]">ACMP3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[88]">ACMP4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[4d]">ADC1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[4e]">ADC2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[83]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[80]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[81]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[82]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[41]">BEE_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[cd]">CAN1_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN1_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[2e]">CAN1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[ce]">CAN2_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN2_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[2f]">CAN2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[de]">CAN3_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN3_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[a4]">CAN3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[69]">CCM_1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6a]">CCM_2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[1d]">CORE_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[35]">CSI_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[3b]">CSU_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[1b]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[1c]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[4f]">DCDC_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[3c]">DCP_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[3d]">DCP_VMI_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[ac]">DMA0_DMA16_DriverIRQHandler</a> from fsl_edma.o(.text.DMA0_DMA16_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[a]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b6]">DMA10_DMA26_DriverIRQHandler</a> from fsl_edma.o(.text.DMA10_DMA26_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[14]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b7]">DMA11_DMA27_DriverIRQHandler</a> from fsl_edma.o(.text.DMA11_DMA27_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[15]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b8]">DMA12_DMA28_DriverIRQHandler</a> from fsl_edma.o(.text.DMA12_DMA28_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[16]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b9]">DMA13_DMA29_DriverIRQHandler</a> from fsl_edma.o(.text.DMA13_DMA29_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[17]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[ba]">DMA14_DMA30_DriverIRQHandler</a> from fsl_edma.o(.text.DMA14_DMA30_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[18]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[bb]">DMA15_DMA31_DriverIRQHandler</a> from fsl_edma.o(.text.DMA15_DMA31_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[19]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[ad]">DMA1_DMA17_DriverIRQHandler</a> from fsl_edma.o(.text.DMA1_DMA17_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[b]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[ae]">DMA2_DMA18_DriverIRQHandler</a> from fsl_edma.o(.text.DMA2_DMA18_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[c]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[af]">DMA3_DMA19_DriverIRQHandler</a> from fsl_edma.o(.text.DMA3_DMA19_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[d]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b0]">DMA4_DMA20_DriverIRQHandler</a> from fsl_edma.o(.text.DMA4_DMA20_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[e]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b1]">DMA5_DMA21_DriverIRQHandler</a> from fsl_edma.o(.text.DMA5_DMA21_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[f]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b2]">DMA6_DMA22_DriverIRQHandler</a> from fsl_edma.o(.text.DMA6_DMA22_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[10]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b3]">DMA7_DMA23_DriverIRQHandler</a> from fsl_edma.o(.text.DMA7_DMA23_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[11]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b4]">DMA8_DMA24_DriverIRQHandler</a> from fsl_edma.o(.text.DMA8_DMA24_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[12]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[b5]">DMA9_DMA25_DriverIRQHandler</a> from fsl_edma.o(.text.DMA9_DMA25_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[13]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[bc]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[1a]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a8]">DefaultISR</a> from startup_mimxrt1062.o(.text) referenced from fsl_flexcan.o(.data.s_flexcanIsr)
 <LI><a href="#[a8]">DefaultISR</a> from startup_mimxrt1062.o(.text) referenced from fsl_lpuart.o(.data.s_lpuartIsr)
 <LI><a href="#[a8]">DefaultISR</a> from startup_mimxrt1062.o(.text) referenced from fsl_usdhc.o(.data.s_usdhcIsr)
 <LI><a href="#[a8]">DefaultISR</a> from startup_mimxrt1062.o(.text) referenced 81 times from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8b]">ENC1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8c]">ENC2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8d]">ENC3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8e]">ENC4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[dd]">ENET2_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[a3]">ENET2_1588_Timer_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[dc]">ENET2_DriverIRQHandler</a> from fsl_enet.o(.text.ENET2_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[a2]">ENET2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[db]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[7d]">ENET_1588_Timer_IRQHandler</a> from fsl_enet.o(.text.ENET_1588_Timer_IRQHandler) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[da]">ENET_DriverIRQHandler</a> from fsl_enet.o(.text.ENET_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[7c]">ENET_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[68]">EWM_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d4]">FLEXIO1_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO1_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[64]">FLEXIO1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d5]">FLEXIO2_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO2_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[65]">FLEXIO2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[df]">FLEXIO3_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO3_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[a6]">FLEXIO3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[30]">FLEXRAM_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d6]">FLEXSPI2_DriverIRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[75]">FLEXSPI2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d7]">FLEXSPI_DriverIRQHandler</a> from fsl_flexspi.o(.text.FLEXSPI_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[76]">FLEXSPI_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6b]">GPC_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5a]">GPIO1_Combined_0_15_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5b]">GPIO1_Combined_16_31_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[52]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[53]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[54]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[55]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[56]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[57]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[58]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[59]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5c]">GPIO2_Combined_0_15_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5d]">GPIO2_Combined_16_31_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5e]">GPIO3_Combined_0_15_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5f]">GPIO3_Combined_16_31_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[60]">GPIO4_Combined_0_15_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[61]">GPIO4_Combined_16_31_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[62]">GPIO5_Combined_0_15_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[63]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a7]">GPIO6_7_8_9_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[33]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6e]">GPT1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6f]">GPT2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[31]">KPP_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[34]">LCDIF_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c5]">LPI2C1_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[26]">LPI2C1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c6]">LPI2C2_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[27]">LPI2C2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c7]">LPI2C3_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C3_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[28]">LPI2C3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c8]">LPI2C4_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C4_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[29]">LPI2C4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c9]">LPSPI1_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI1_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[2a]">LPSPI1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[ca]">LPSPI2_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI2_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[2b]">LPSPI2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[cb]">LPSPI3_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI3_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[2c]">LPSPI3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[cc]">LPSPI4_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI4_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[2d]">LPSPI4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[bd]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[1e]">LPUART1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[be]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[1f]">LPUART2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[bf]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[20]">LPUART3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c0]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[21]">LPUART4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c1]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[22]">LPUART5_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c2]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[23]">LPUART6_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c3]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[24]">LPUART7_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[c4]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[25]">LPUART8_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[84]">PIT_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[47]">PMU_EVENT_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[70]">PWM1_0_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[71]">PWM1_1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[72]">PWM1_2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[73]">PWM1_3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[74]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[93]">PWM2_0_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[94]">PWM2_1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[95]">PWM2_2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[96]">PWM2_3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[97]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[98]">PWM3_0_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[99]">PWM3_1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9a]">PWM3_2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9b]">PWM3_3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9c]">PWM3_FAULT_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9d]">PWM4_0_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9e]">PWM4_1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9f]">PWM4_2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a0]">PWM4_3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a1]">PWM4_FAULT_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[36]">PXP_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[67]">RTWDOG_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6d]">Reserved115_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[89]">Reserved143_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8a]">Reserved144_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[a5]">Reserved171_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[3e]">Reserved68_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[48]">Reserved78_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[50]">Reserved86_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[51]">Reserved87_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[cf]">SAI1_DriverIRQHandler</a> from fsl_sai.o(.text.SAI1_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[42]">SAI1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d0]">SAI2_DriverIRQHandler</a> from fsl_sai.o(.text.SAI2_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[43]">SAI2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d1]">SAI3_RX_DriverIRQHandler</a> from fsl_sai.o(.text.SAI3_RX_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[44]">SAI3_RX_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d2]">SAI3_TX_DriverIRQHandler</a> from fsl_sai.o(.text.SAI3_TX_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[45]">SAI3_TX_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[77]">SEMC_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[40]">SJC_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[38]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[39]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[3a]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d3]">SPDIF_DriverIRQHandler</a> from fsl_spdif.o(.text.SPDIF_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[46]">SPDIF_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6c]">SRC_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[aa]">SystemInit</a> from system_mimxrt1062.o(.text.SystemInit) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[49]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[4a]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[8f]">TMR1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[90]">TMR2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[91]">TMR3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[92]">TMR4_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[3f]">TRNG_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[32]">TSC_DIG_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[7b]">USB_OTG1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[7a]">USB_OTG2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[4b]">USB_PHY1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[4c]">USB_PHY2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d8]">USDHC1_DriverIRQHandler</a> from fsl_usdhc.o(.text.USDHC1_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[78]">USDHC1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[d9]">USDHC2_DriverIRQHandler</a> from fsl_usdhc.o(.text.USDHC2_DriverIRQHandler) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[79]">USDHC2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[66]">WDOG1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[37]">WDOG2_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[7e]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[7f]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1062.o(.text) referenced from startup_mimxrt1062.o(.isr_vector)
 <LI><a href="#[ab]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mimxrt1062.o(.text)
 <LI><a href="#[e0]">fputc</a> from bsp_lpuart.o(.text.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[a9]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ab]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[1df]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[e1]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1e1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1e4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[85]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[86]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[87]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[88]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4d]"></a>ADC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4e]"></a>ADC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[83]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[80]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[81]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[82]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[41]"></a>BEE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[69]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[6a]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d]"></a>CORE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[35]"></a>CSI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[3b]"></a>CSU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4f]"></a>DCDC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>DCP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[bc]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a8]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_IRQHandler
</UL>
<BR>[Address Reference Count : 4]<UL><LI> startup_mimxrt1062.o(.isr_vector)
<LI> fsl_flexcan.o(.data.s_flexcanIsr)
<LI> fsl_lpuart.o(.data.s_lpuartIsr)
<LI> fsl_usdhc.o(.data.s_usdhcIsr)
</UL>
<P><STRONG><a name="[8b]"></a>ENC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[8c]"></a>ENC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[8d]"></a>ENC3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[8e]"></a>ENC4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[dd]"></a>ENET2_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>EWM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[30]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[d6]"></a>FLEXSPI2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>GPC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5a]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[52]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[53]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[54]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[55]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[56]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[57]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[58]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[59]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[60]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[61]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[62]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[63]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a7]"></a>GPIO6_7_8_9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[33]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[6e]"></a>GPT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[6f]"></a>GPT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>KPP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[34]"></a>LCDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[84]"></a>PIT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[47]"></a>PMU_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[70]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[71]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[72]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[73]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[74]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[93]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[94]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[95]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[96]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[97]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[98]"></a>PWM3_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[99]"></a>PWM3_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9a]"></a>PWM3_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9b]"></a>PWM3_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9c]"></a>PWM3_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9d]"></a>PWM4_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9e]"></a>PWM4_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9f]"></a>PWM4_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a0]"></a>PWM4_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a1]"></a>PWM4_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>PXP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[67]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[6d]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[89]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[8a]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a5]"></a>Reserved171_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[3e]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[48]"></a>Reserved78_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[50]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[51]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[77]"></a>SEMC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>SJC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[38]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[6c]"></a>SRC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[49]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4a]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[8f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[90]"></a>TMR2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[91]"></a>TMR3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[92]"></a>TMR4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[3f]"></a>TRNG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[32]"></a>TSC_DIG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[7b]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[7a]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4b]"></a>USB_PHY1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[4c]"></a>USB_PHY2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[66]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[7e]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[7f]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1062.o(.text)
<LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1062.o(.text)
<LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1062.o(.text)
<LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1062.o(.text)
<LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1062.o(.text)
<LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[e]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[10]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[12]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[13]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[14]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[1f]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[20]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[23]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[25]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[28]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[29]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[2b]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[43]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[45]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[46]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[64]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[65]"></a>FLEXIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[75]"></a>FLEXSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[76]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[78]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[79]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[7c]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a2]"></a>ENET2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a3]"></a>ENET2_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a4]"></a>CAN3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[a6]"></a>FLEXIO3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1062.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[e3]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>

<P><STRONG><a name="[1e5]"></a>___aeabi_memcpy4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1e8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ReceiveTuningBlock
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SetBlockSize
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendApplicationCommand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SelectCard
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GoIdle
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendRca
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendInterfaceCondition
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>

<P><STRONG><a name="[1ea]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortSend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortReceive
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferTxHandleIRQ
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferRxHandleIRQ
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferAbortSend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferAbortReceive
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteManualTuning
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
</UL>

<P><STRONG><a name="[1eb]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ec]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ed]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ee]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 842 bytes, Stack size 40 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_SetMux
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitUsb1Pll
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPll
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetXtalFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetRtcXtalFreq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, board.o(.text.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BOARD_ConfigMPU
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, board.o(.text.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMux
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lpuart_init
</UL>

<P><STRONG><a name="[fa]"></a>BOARD_InitPins</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, pin_mux.o(.text.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BOARD_InitPins &rArr; CLOCK_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcan.o(.text.CAN1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_flexcan.o(.text.CAN2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>CAN3_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_flexcan.o(.text.CAN3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>CLOCK_GetAhbFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetAhbFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[107]"></a>CLOCK_GetFreq</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllUsb1SWFreq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_clock_list
</UL>

<P><STRONG><a name="[109]"></a>CLOCK_GetIpgFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetIpgFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[10a]"></a>CLOCK_GetPerClkFreq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetPerClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[f8]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 584 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetPllFreq &rArr; CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPllEnabled
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPllBypassed
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllBypassRefClk
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllUsb1SWFreq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[108]"></a>CLOCK_GetSemcFreq</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetSemcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_GetSemcFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[10d]"></a>CLOCK_GetSysPfdFreq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetSysPfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usdhc_host_init
</UL>

<P><STRONG><a name="[10c]"></a>CLOCK_GetUsb1PfdFreq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetUsb1PfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[ee]"></a>CLOCK_InitArmPll</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitArmPll))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1d9]"></a>CLOCK_InitSysPfd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_InitSysPfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitSysPfd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usdhc_clock_init
</UL>

<P><STRONG><a name="[ef]"></a>CLOCK_InitSysPll</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitSysPll))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[f0]"></a>CLOCK_InitUsb1Pll</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitUsb1Pll))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[114]"></a>DCACHE_CleanByRange</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_cache.o(.text.DCACHE_CleanByRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCACHE_CleanByRange
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L1CACHE_CleanDCacheByRange
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
</UL>

<P><STRONG><a name="[116]"></a>DCACHE_InvalidateByRange</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_cache.o(.text.DCACHE_InvalidateByRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCACHE_InvalidateByRange
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L1CACHE_InvalidateDCacheByRange
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
</UL>

<P><STRONG><a name="[ac]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA0_DMA16_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA0_DMA16_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA10_DMA26_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA10_DMA26_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA11_DMA27_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA11_DMA27_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA12_DMA28_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA12_DMA28_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA13_DMA29_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA13_DMA29_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA14_DMA30_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA14_DMA30_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA15_DMA31_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA15_DMA31_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA1_DMA17_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_DMA17_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA2_DMA18_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_DMA18_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA3_DMA19_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA3_DMA19_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA4_DMA20_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA4_DMA20_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA5_DMA21_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA5_DMA21_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA6_DMA22_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA6_DMA22_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA7_DMA23_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA7_DMA23_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA8_DMA24_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA8_DMA24_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA9_DMA25_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA9_DMA25_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>EDMA_GetChannelStatusFlags</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_edma.o(.text.EDMA_GetChannelStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[119]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, fsl_edma.o(.text.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EDMA_HandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>ENET2_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_enet.o(.text.ENET2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ENET2_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_enet.o(.text.ENET_1588_Timer_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.isr_vector)
</UL>
<P><STRONG><a name="[11a]"></a>ENET_CommonFrame0IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, fsl_enet.o(.text.ENET_CommonFrame0IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ENET_CommonFrame0IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_DriverIRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET2_DriverIRQHandler
</UL>

<P><STRONG><a name="[da]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_enet.o(.text.ENET_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ENET_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>ENET_GetInstance</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_enet.o(.text.ENET_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(.text.FLEXIO1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXIO1_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>FLEXIO2_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(.text.FLEXIO2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXIO2_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>FLEXIO3_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(.text.FLEXIO3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXIO3_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>FLEXSPI_CheckAndClearError</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_flexspi.o(.text.FLEXSPI_CheckAndClearError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXSPI_CheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_TransferHandleIRQ
</UL>

<P><STRONG><a name="[d7]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_flexspi.o(.text.FLEXSPI_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLEXSPI_DriverIRQHandler &rArr; FLEXSPI_TransferHandleIRQ &rArr; FLEXSPI_CheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>FLEXSPI_TransferAbort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_flexspi.o(.text.FLEXSPI_TransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXSPI_TransferAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_TransferHandleIRQ
</UL>

<P><STRONG><a name="[11f]"></a>FLEXSPI_TransferHandleIRQ</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, fsl_flexspi.o(.text.FLEXSPI_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXSPI_TransferHandleIRQ &rArr; FLEXSPI_CheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_TransferAbort
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_CheckAndClearError
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_DriverIRQHandler
</UL>

<P><STRONG><a name="[122]"></a>GPIO_PinInit</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_PinInit &rArr; GPIO_SetPinInterruptConfig &rArr; GPIO_PinSetInterruptConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_init
</UL>

<P><STRONG><a name="[126]"></a>GPIO_PinSetInterruptConfig</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, fsl_gpio.o(.text.GPIO_PinSetInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinInterruptConfig
</UL>

<P><STRONG><a name="[124]"></a>GPIO_PinWrite</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_ctl
</UL>

<P><STRONG><a name="[c5]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPI2C1_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler &rArr; LPI2C_MasterTransferHandleIRQ &rArr; LPI2C_RunTransferStateMachine &rArr; LPI2C_MasterCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPI2C2_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler &rArr; LPI2C_MasterTransferHandleIRQ &rArr; LPI2C_RunTransferStateMachine &rArr; LPI2C_MasterCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPI2C3_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler &rArr; LPI2C_MasterTransferHandleIRQ &rArr; LPI2C_RunTransferStateMachine &rArr; LPI2C_MasterCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPI2C4_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler &rArr; LPI2C_MasterTransferHandleIRQ &rArr; LPI2C_RunTransferStateMachine &rArr; LPI2C_MasterCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[12a]"></a>LPI2C_MasterCheckAndClearError</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_MasterCheckAndClearError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_MasterCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_RunTransferStateMachine
</UL>

<P><STRONG><a name="[12c]"></a>LPI2C_MasterTransferAbort</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_MasterTransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_MasterTransferAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterDisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[128]"></a>LPI2C_MasterTransferHandleIRQ</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, fsl_lpi2c.o(.text.LPI2C_MasterTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LPI2C_MasterTransferHandleIRQ &rArr; LPI2C_RunTransferStateMachine &rArr; LPI2C_MasterCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferAbort
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_RunTransferStateMachine
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetFifoCounts
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterDisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>

<P><STRONG><a name="[129]"></a>LPI2C_SlaveTransferHandleIRQ</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_SlaveTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C_SlaveTransferHandleIRQ &rArr; LPI2C_SlaveCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveGetStatusFlags
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveClearStatusFlags
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveCheckAndClearError
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LPSPI1_DriverIRQHandler &rArr; LPSPI_CommonIRQHandler &rArr; LPSPI_MasterTransferHandleIRQ &rArr; LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LPSPI2_DriverIRQHandler &rArr; LPSPI_CommonIRQHandler &rArr; LPSPI_MasterTransferHandleIRQ &rArr; LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LPSPI3_DriverIRQHandler &rArr; LPSPI_CommonIRQHandler &rArr; LPSPI_MasterTransferHandleIRQ &rArr; LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LPSPI4_DriverIRQHandler &rArr; LPSPI_CommonIRQHandler &rArr; LPSPI_MasterTransferHandleIRQ &rArr; LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[136]"></a>LPSPI_MasterTransferHandleIRQ</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, fsl_lpspi.o(.text.LPSPI_MasterTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPSPI_MasterTransferHandleIRQ &rArr; LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SeparateReadData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ReadData
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferFillUpTxFifo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferComplete
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetTxFifoCount
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetStatusFlags
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetRxFifoCount
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_EnableInterrupts
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DisableInterrupts
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>

<P><STRONG><a name="[137]"></a>LPSPI_SlaveTransferHandleIRQ</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, fsl_lpspi.o(.text.LPSPI_SlaveTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LPSPI_SlaveTransferHandleIRQ &rArr; LPSPI_SlaveTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferFillUpTxFifo
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferComplete
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SeparateReadData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ReadData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetTxFifoCount
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetStatusFlags
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetRxFifoCount
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_EnableInterrupts
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DisableInterrupts
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART_GetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lpuart_init
</UL>

<P><STRONG><a name="[148]"></a>LPUART_GetInstance</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[1d5]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[147]"></a>LPUART_Init</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, fsl_lpuart.o(.text.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SoftwareReset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lpuart_init
</UL>

<P><STRONG><a name="[cf]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SAI1_DriverIRQHandler &rArr; SAI_TransferTxHandleIRQ &rArr; SAI_WriteNonBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxGetEnabledInterruptStatus
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxGetEnabledInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SAI2_DriverIRQHandler &rArr; SAI_TransferTxHandleIRQ &rArr; SAI_WriteNonBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxGetEnabledInterruptStatus
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxGetEnabledInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_sai.o(.text.SAI3_RX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SAI3_RX_DriverIRQHandler &rArr; SAI_TransferRxHandleIRQ &rArr; SAI_ReadNonBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_sai.o(.text.SAI3_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SAI3_TX_DriverIRQHandler &rArr; SAI_TransferTxHandleIRQ &rArr; SAI_WriteNonBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[14e]"></a>SAI_RxEnable</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_sai.o(.text.SAI_RxEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_RxEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortReceive
</UL>

<P><STRONG><a name="[155]"></a>SAI_RxSoftwareReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI_RxSoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
</UL>

<P><STRONG><a name="[150]"></a>SAI_TransferAbortReceive</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI_TransferAbortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_TransferAbortReceive &rArr; SAI_RxEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxEnable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxDisableInterrupts
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
</UL>

<P><STRONG><a name="[152]"></a>SAI_TransferAbortSend</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI_TransferAbortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_TransferAbortSend &rArr; SAI_TxEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxEnable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxDisableInterrupts
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
</UL>

<P><STRONG><a name="[14b]"></a>SAI_TransferRxHandleIRQ</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, fsl_sai.o(.text.SAI_TransferRxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SAI_TransferRxHandleIRQ &rArr; SAI_ReadNonBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortReceive
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxSoftwareReset
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxClearStatusFlags
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_ReadNonBlocking
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_RX_DriverIRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_DriverIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>SAI_TransferTxHandleIRQ</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, fsl_sai.o(.text.SAI_TransferTxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SAI_TransferTxHandleIRQ &rArr; SAI_WriteNonBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxSoftwareReset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortSend
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_WriteNonBlocking
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxClearStatusFlags
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_TX_DriverIRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_DriverIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[153]"></a>SAI_TxEnable</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fsl_sai.o(.text.SAI_TxEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_TxEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortSend
</UL>

<P><STRONG><a name="[158]"></a>SAI_TxSoftwareReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI_TxSoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
</UL>

<P><STRONG><a name="[15a]"></a>SDK_DelayAtLeastUs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_common.o(.text.SDK_DelayAtLeastUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDK_DelayAtLeastUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayLoop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_OSADelay
</UL>

<P><STRONG><a name="[15c]"></a>SDMMCHOST_CardDetectInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_CardDetectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMCHOST_CardDetectInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableInterruptStatus
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_CardDetectByData3
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostInit
</UL>

<P><STRONG><a name="[164]"></a>SDMMCHOST_ExecuteManualTuning</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_ExecuteManualTuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SDMMCHOST_ExecuteManualTuning &rArr; SDMMCHOST_ReceiveTuningBlock &rArr; USDHC_SetDataConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Reset
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableManualTuning
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_AdjustDelayForManualTuning
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_OSADelay
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableAutoTuning
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_DisableInterruptStatus
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CheckTuningResult
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ReceiveTuningBlock
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteTuning
</UL>

<P><STRONG><a name="[174]"></a>SDMMCHOST_ExecuteTuning</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_ExecuteTuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SDMMCHOST_ExecuteTuning &rArr; SDMMCHOST_ExecuteStdTuning &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteManualTuning
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ExecuteTuning
</UL>

<P><STRONG><a name="[179]"></a>SDMMCHOST_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMCHOST_Init &rArr; USDHC_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostInit
</UL>

<P><STRONG><a name="[184]"></a>SDMMCHOST_SetCardBusWidth</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_SetCardBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMCHOST_SetCardBusWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetDataBusWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[1ab]"></a>SDMMCHOST_SetCardPower</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_SetCardPower))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetCardPower
</UL>

<P><STRONG><a name="[188]"></a>SDMMCHOST_SwitchToVoltage</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_SwitchToVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMCHOST_SwitchToVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDSHC_SelectVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProbeBusVoltage
</UL>

<P><STRONG><a name="[170]"></a>SDMMCHOST_TransferFunction</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_TransferFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_InvalidateByRange
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanByRange
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ErrorRecovery
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SetBlockSize
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendApplicationCommand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SelectCard
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GoIdle
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendRca
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendInterfaceCondition
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>

<P><STRONG><a name="[18b]"></a>SDMMC_GoIdle</STRONG> (Thumb, 48 bytes, Stack size 64 bytes, fsl_sdmmc_common.o(.text.SDMMC_GoIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SDMMC_GoIdle &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GoIdle
</UL>

<P><STRONG><a name="[169]"></a>SDMMC_OSADelay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_sdmmc_osa.o(.text.SDMMC_OSADelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDMMC_OSADelay &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteManualTuning
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetCardPower
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PollingCardStatusBusy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
</UL>

<P><STRONG><a name="[18c]"></a>SDMMC_SelectCard</STRONG> (Thumb, 84 bytes, Stack size 72 bytes, fsl_sdmmc_common.o(.text.SDMMC_SelectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SDMMC_SelectCard &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
</UL>

<P><STRONG><a name="[18d]"></a>SDMMC_SendApplicationCommand</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, fsl_sdmmc_common.o(.text.SDMMC_SendApplicationCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SDMMC_SendApplicationCommand &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
</UL>

<P><STRONG><a name="[18e]"></a>SDMMC_SetBlockSize</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, fsl_sdmmc_common.o(.text.SDMMC_SetBlockSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SDMMC_SetBlockSize &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBlockSize
</UL>

<P><STRONG><a name="[194]"></a>SD_CardInit</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, fsl_sd.o(.text.SD_CardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = SD_CardInit &rArr; SD_ReadStatus &rArr; SD_PollingCardStatusBusy &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr;  SD_PollingCardStatusBusy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_SetCardBusWidth
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBlockSize
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendRca
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProbeBusVoltage
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_SetCardClock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_SendCardActive
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
</UL>

<P><STRONG><a name="[1a0]"></a>SD_HostInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_sd.o(.text.SD_HostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_HostInit &rArr; SDMMCHOST_Init &rArr; USDHC_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_CardDetectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usdhc_host_init
</UL>

<P><STRONG><a name="[19d]"></a>SD_ReadStatus</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, fsl_sd.o(.text.SD_ReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = SD_ReadStatus &rArr; SD_PollingCardStatusBusy &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr;  SD_PollingCardStatusBusy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PollingCardStatusBusy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[198]"></a>SD_SelectCard</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_sd.o(.text.SD_SelectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_SelectCard &rArr; SDMMC_SelectCard &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SelectCard
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[1aa]"></a>SD_SetCardPower</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_sd.o(.text.SD_SetCardPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_SetCardPower &rArr; SDMMC_OSADelay &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_OSADelay
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_SetCardPower
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
</UL>

<P><STRONG><a name="[d3]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_spdif.o(.text.SPDIF_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPDIF_DriverIRQHandler &rArr; SPDIF_TransferTxHandleIRQ &rArr; SPDIF_TransferAbortSend &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferTxHandleIRQ
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferRxHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[1b0]"></a>SPDIF_TransferAbortReceive</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_spdif.o(.text.SPDIF_TransferAbortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPDIF_TransferAbortReceive &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_DisableInterrupts
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferRxHandleIRQ
</UL>

<P><STRONG><a name="[1b2]"></a>SPDIF_TransferAbortSend</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_spdif.o(.text.SPDIF_TransferAbortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPDIF_TransferAbortSend &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_DisableInterrupts
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferTxHandleIRQ
</UL>

<P><STRONG><a name="[1af]"></a>SPDIF_TransferRxHandleIRQ</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, fsl_spdif.o(.text.SPDIF_TransferRxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPDIF_TransferRxHandleIRQ &rArr; SPDIF_TransferAbortReceive &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferAbortReceive
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_ReadUChannel
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_ReadRightData
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_ReadQChannel
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_ReadLeftData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_GetStatusFlag
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_ClearStatusFlags
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_DriverIRQHandler
</UL>

<P><STRONG><a name="[1ae]"></a>SPDIF_TransferTxHandleIRQ</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, fsl_spdif.o(.text.SPDIF_TransferTxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPDIF_TransferTxHandleIRQ &rArr; SPDIF_TransferAbortSend &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferAbortSend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_WriteRightData
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_WriteLeftData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_GetStatusFlag
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_DriverIRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>SystemInit</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, system_mimxrt1062.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[1bb]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1062.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d8]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_usdhc.o(.text.USDHC1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_usdhc.o(.text.USDHC2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1062.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>USDHC_AdjustDelayForManualTuning</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC_AdjustDelayForManualTuning))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteManualTuning
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
</UL>

<P><STRONG><a name="[160]"></a>USDHC_EnableDDRMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC_EnableDDRMode))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_EnableDDRMode
</UL>

<P><STRONG><a name="[165]"></a>USDHC_EnableManualTuning</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC_EnableManualTuning))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteManualTuning
</UL>

<P><STRONG><a name="[16e]"></a>USDHC_EnableStandardTuning</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC_EnableStandardTuning))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
</UL>

<P><STRONG><a name="[17a]"></a>USDHC_Init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, fsl_usdhc.o(.text.USDHC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USDHC_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInstance
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
</UL>

<P><STRONG><a name="[163]"></a>USDHC_Reset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteManualTuning
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ReceiveTuningBlock
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ErrorRecovery
</UL>

<P><STRONG><a name="[17e]"></a>USDHC_SendCommand</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, fsl_usdhc.o(.text.USDHC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ReceiveTuningBlock
</UL>

<P><STRONG><a name="[1c3]"></a>USDHC_SetADMA1Descriptor</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, fsl_usdhc.o(.text.USDHC_SetADMA1Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USDHC_SetADMA1Descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
</UL>

<P><STRONG><a name="[1c4]"></a>USDHC_SetADMA2Descriptor</STRONG> (Thumb, 252 bytes, Stack size 28 bytes, fsl_usdhc.o(.text.USDHC_SetADMA2Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USDHC_SetADMA2Descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
</UL>

<P><STRONG><a name="[1c2]"></a>USDHC_SetAdmaTableConfig</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, fsl_usdhc.o(.text.USDHC_SetAdmaTableConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USDHC_SetAdmaTableConfig &rArr; USDHC_SetADMA2Descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetInternalDmaConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetADMA2Descriptor
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetADMA1Descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[183]"></a>USDHC_SetCardActive</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC_SetCardActive))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_SendCardActive
</UL>

<P><STRONG><a name="[17d]"></a>USDHC_SetDataConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_usdhc.o(.text.USDHC_SetDataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC_SetDataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ReceiveTuningBlock
</UL>

<P><STRONG><a name="[1c5]"></a>USDHC_SetInternalDmaConfig</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_usdhc.o(.text.USDHC_SetInternalDmaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC_SetInternalDmaConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
</UL>

<P><STRONG><a name="[187]"></a>USDHC_SetSdClock</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, fsl_usdhc.o(.text.USDHC_SetSdClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USDHC_SetSdClock
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_SetCardClock
</UL>

<P><STRONG><a name="[18a]"></a>USDHC_TransferBlocking</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, fsl_usdhc.o(.text.USDHC_TransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SendCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetTransferConfig
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableInternalDMA
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
</UL>

<P><STRONG><a name="[1ce]"></a>bsp_led_ctl</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_led.o(.text.bsp_led_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_led_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>bsp_led_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_led.o(.text.bsp_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_led_init &rArr; GPIO_PinInit &rArr; GPIO_SetPinInterruptConfig &rArr; GPIO_PinSetInterruptConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d0]"></a>bsp_lpuart_init</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, bsp_lpuart.o(.text.bsp_lpuart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsp_lpuart_init &rArr; LPUART_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d1]"></a>bsp_usdhc_host_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_usdhc.o(.text.bsp_usdhc_host_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_usdhc_host_init &rArr; SD_HostInit &rArr; SDMMCHOST_Init &rArr; USDHC_Init &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usdhc_clock_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d4]"></a>ccm_clock_list</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, main.o(.text.ccm_clock_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ccm_clock_list &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPerClkFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_lpuart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[a9]"></a>main</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = main &rArr; sdcard_init &rArr; SD_CardInit &rArr; SD_ReadStatus &rArr; SD_PollingCardStatusBusy &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr;  SD_PollingCardStatusBusy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_test
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usdhc_host_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lpuart_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_ctl
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_clock_list
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1d7]"></a>sdcard_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_usdhc.o(.text.sdcard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sdcard_init &rArr; SD_CardInit &rArr; SD_ReadStatus &rArr; SD_PollingCardStatusBusy &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr;  SD_PollingCardStatusBusy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d8]"></a>sdcard_test</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_usdhc.o(.text.sdcard_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sdcard_test &rArr; CardInformationLog &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardInformationLog
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dc]"></a>__0printf$1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ef]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[113]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardInformationLog
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_clock_list
</UL>

<P><STRONG><a name="[1f0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1f1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1f2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[115]"></a>L1CACHE_CleanDCacheByRange</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_cache.o(.text.L1CACHE_CleanDCacheByRange))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanByRange
</UL>

<P><STRONG><a name="[117]"></a>L1CACHE_InvalidateDCacheByRange</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_cache.o(.text.L1CACHE_InvalidateDCacheByRange))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_InvalidateByRange
</UL>

<P><STRONG><a name="[10b]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllBypassRefClk
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[106]"></a>CLOCK_GetPeriphClkFreq</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetPeriphClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>

<P><STRONG><a name="[10f]"></a>CLOCK_GetPllBypassRefClk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetPllBypassRefClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[10e]"></a>CLOCK_GetPllUsb1SWFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetPllUsb1SWFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_GetPllUsb1SWFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetPllBypassRefClk
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[111]"></a>CLOCK_IsPllBypassed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_IsPllBypassed))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[110]"></a>CLOCK_IsPllEnabled</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_IsPllEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[15b]"></a>DelayLoop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_common.o(.text.DelayLoop))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>

<P><STRONG><a name="[11c]"></a>FLEXIO_CommonIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fsl_flexio.o(.text.FLEXIO_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXIO_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO3_DriverIRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO2_DriverIRQHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO1_DriverIRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>FLEXSPI_ClearInterruptStatusFlags</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_flexspi.o(.text.FLEXSPI_ClearInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_CheckAndClearError
</UL>

<P><STRONG><a name="[121]"></a>FLEXSPI_DisableInterrupts</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_flexspi.o(.text.FLEXSPI_DisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_TransferAbort
</UL>

<P><STRONG><a name="[ff]"></a>CLOCK_ControlGate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_gpio.o(.text.CLOCK_ControlGate))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[fe]"></a>CLOCK_EnableClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_gpio.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[123]"></a>GPIO_GetInstance</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[125]"></a>GPIO_SetPinInterruptConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_gpio.o(.text.GPIO_SetPinInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetPinInterruptConfig &rArr; GPIO_PinSetInterruptConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[127]"></a>LPI2C_CommonIRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LPI2C_CommonIRQHandler &rArr; LPI2C_MasterTransferHandleIRQ &rArr; LPI2C_RunTransferStateMachine &rArr; LPI2C_MasterCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferHandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C4_DriverIRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C3_DriverIRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>LPI2C_MasterClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_MasterClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
</UL>

<P><STRONG><a name="[12d]"></a>LPI2C_MasterDisableInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_MasterDisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferHandleIRQ
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferAbort
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_RunTransferStateMachine
</UL>

<P><STRONG><a name="[12f]"></a>LPI2C_MasterGetFifoCounts</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_MasterGetFifoCounts))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferHandleIRQ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_RunTransferStateMachine
</UL>

<P><STRONG><a name="[130]"></a>LPI2C_MasterGetStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_MasterGetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_RunTransferStateMachine
</UL>

<P><STRONG><a name="[12e]"></a>LPI2C_RunTransferStateMachine</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, fsl_lpi2c.o(.text.LPI2C_RunTransferStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LPI2C_RunTransferStateMachine &rArr; LPI2C_MasterCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetStatusFlags
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetFifoCounts
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterDisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[131]"></a>LPI2C_SlaveCheckAndClearError</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C_SlaveCheckAndClearError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPI2C_SlaveCheckAndClearError
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
</UL>

<P><STRONG><a name="[132]"></a>LPI2C_SlaveClearStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_SlaveClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveCheckAndClearError
</UL>

<P><STRONG><a name="[133]"></a>LPI2C_SlaveGetStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_SlaveGetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
</UL>

<P><STRONG><a name="[143]"></a>LPSPI_ClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[13b]"></a>LPSPI_CombineWriteData</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_CombineWriteData))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferFillUpTxFifo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferFillUpTxFifo
</UL>

<P><STRONG><a name="[134]"></a>LPSPI_CommonIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPSPI_CommonIRQHandler &rArr; LPSPI_MasterTransferHandleIRQ &rArr; LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_IsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[139]"></a>LPSPI_DisableInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_DisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferComplete
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferComplete
</UL>

<P><STRONG><a name="[141]"></a>LPSPI_EnableInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[140]"></a>LPSPI_GetRxFifoCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_GetRxFifoCount))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[142]"></a>LPSPI_GetStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[13d]"></a>LPSPI_GetTxFifoCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_GetTxFifoCount))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferFillUpTxFifo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferFillUpTxFifo
</UL>

<P><STRONG><a name="[135]"></a>LPSPI_IsMaster</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_IsMaster))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>

<P><STRONG><a name="[138]"></a>LPSPI_MasterTransferComplete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_MasterTransferComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_MasterTransferComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[13a]"></a>LPSPI_MasterTransferFillUpTxFifo</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, fsl_lpspi.o(.text.LPSPI_MasterTransferFillUpTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_WriteData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetTxFifoCount
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CombineWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[13e]"></a>LPSPI_ReadData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[13f]"></a>LPSPI_SeparateReadData</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_SeparateReadData))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[144]"></a>LPSPI_SlaveTransferComplete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_SlaveTransferComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_SlaveTransferComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
</UL>

<P><STRONG><a name="[145]"></a>LPSPI_SlaveTransferFillUpTxFifo</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, fsl_lpspi.o(.text.LPSPI_SlaveTransferFillUpTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPSPI_SlaveTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_WriteData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetTxFifoCount
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CombineWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
</UL>

<P><STRONG><a name="[13c]"></a>LPSPI_WriteData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferFillUpTxFifo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferFillUpTxFifo
</UL>

<P><STRONG><a name="[101]"></a>CLOCK_ControlGate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[100]"></a>CLOCK_EnableClock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[149]"></a>LPUART_SoftwareReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_SoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[156]"></a>SAI_ReadNonBlocking</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, fsl_sai.o(.text.SAI_ReadNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SAI_ReadNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
</UL>

<P><STRONG><a name="[14f]"></a>SAI_RxClearStatusFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI_RxClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxEnable
</UL>

<P><STRONG><a name="[151]"></a>SAI_RxDisableInterrupts</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI_RxDisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortReceive
</UL>

<P><STRONG><a name="[14a]"></a>SAI_RxGetEnabledInterruptStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI_RxGetEnabledInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_DriverIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[157]"></a>SAI_TxClearStatusFlags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI_TxClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxEnable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
</UL>

<P><STRONG><a name="[154]"></a>SAI_TxDisableInterrupts</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI_TxDisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortSend
</UL>

<P><STRONG><a name="[14c]"></a>SAI_TxGetEnabledInterruptStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI_TxGetEnabledInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_DriverIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[159]"></a>SAI_WriteNonBlocking</STRONG> (Thumb, 130 bytes, Stack size 36 bytes, fsl_sai.o(.text.SAI_WriteNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SAI_WriteNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
</UL>

<P><STRONG><a name="[1b4]"></a>SPDIF_ClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_spdif.o(.text.SPDIF_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferRxHandleIRQ
</UL>

<P><STRONG><a name="[1b1]"></a>SPDIF_DisableInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_spdif.o(.text.SPDIF_DisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferAbortSend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferAbortReceive
</UL>

<P><STRONG><a name="[1b3]"></a>SPDIF_GetStatusFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_spdif.o(.text.SPDIF_GetStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferTxHandleIRQ
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferRxHandleIRQ
</UL>

<P><STRONG><a name="[1b7]"></a>SPDIF_ReadLeftData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_spdif.o(.text.SPDIF_ReadLeftData))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferRxHandleIRQ
</UL>

<P><STRONG><a name="[1b5]"></a>SPDIF_ReadQChannel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_spdif.o(.text.SPDIF_ReadQChannel))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferRxHandleIRQ
</UL>

<P><STRONG><a name="[1b8]"></a>SPDIF_ReadRightData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_spdif.o(.text.SPDIF_ReadRightData))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferRxHandleIRQ
</UL>

<P><STRONG><a name="[1b6]"></a>SPDIF_ReadUChannel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_spdif.o(.text.SPDIF_ReadUChannel))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferRxHandleIRQ
</UL>

<P><STRONG><a name="[1b9]"></a>SPDIF_WriteLeftData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_spdif.o(.text.SPDIF_WriteLeftData))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferTxHandleIRQ
</UL>

<P><STRONG><a name="[1ba]"></a>SPDIF_WriteRightData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_spdif.o(.text.SPDIF_WriteRightData))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferTxHandleIRQ
</UL>

<P><STRONG><a name="[103]"></a>CLOCK_ControlGate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_usdhc.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[102]"></a>CLOCK_EnableClock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_usdhc.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
</UL>

<P><STRONG><a name="[1bf]"></a>USDHC_ClearInterruptStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC_ClearInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteByDataPortBlocking
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadByDataPortBlocking
</UL>

<P><STRONG><a name="[1c6]"></a>USDHC_EnableInternalDMA</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC_EnableInternalDMA))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[1bc]"></a>USDHC_GetInstance</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
</UL>

<P><STRONG><a name="[1be]"></a>USDHC_GetInterruptStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC_GetInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteByDataPortBlocking
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadByDataPortBlocking
</UL>

<P><STRONG><a name="[1bd]"></a>USDHC_ReadByDataPortBlocking</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, fsl_usdhc.o(.text.USDHC_ReadByDataPortBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USDHC_ReadByDataPortBlocking &rArr; USDHC_ReadDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadDataPort
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
</UL>

<P><STRONG><a name="[1c1]"></a>USDHC_ReadData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadDataPort
</UL>

<P><STRONG><a name="[1c0]"></a>USDHC_ReadDataPort</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, fsl_usdhc.o(.text.USDHC_ReadDataPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USDHC_ReadDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadByDataPortBlocking
</UL>

<P><STRONG><a name="[1cb]"></a>USDHC_ReceiveCommandResponse</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fsl_usdhc.o(.text.USDHC_ReceiveCommandResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USDHC_ReceiveCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
</UL>

<P><STRONG><a name="[1c7]"></a>USDHC_SetTransferConfig</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, fsl_usdhc.o(.text.USDHC_SetTransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC_SetTransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[1c9]"></a>USDHC_TransferDataBlocking</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, fsl_usdhc.o(.text.USDHC_TransferDataBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteByDataPortBlocking
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadByDataPortBlocking
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[1c8]"></a>USDHC_WaitCommandDone</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fsl_usdhc.o(.text.USDHC_WaitCommandDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USDHC_WaitCommandDone &rArr; USDHC_ReceiveCommandResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReceiveCommandResponse
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[1ca]"></a>USDHC_WriteByDataPortBlocking</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, fsl_usdhc.o(.text.USDHC_WriteByDataPortBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteDataPort
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
</UL>

<P><STRONG><a name="[1cd]"></a>USDHC_WriteData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteDataPort
</UL>

<P><STRONG><a name="[1cc]"></a>USDHC_WriteDataPort</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, fsl_usdhc.o(.text.USDHC_WriteDataPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteByDataPortBlocking
</UL>

<P><STRONG><a name="[1d6]"></a>LPUART_WriteByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_lpuart.o(.text.LPUART_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1d3]"></a>CLOCK_GetDiv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_usdhc.o(.text.CLOCK_GetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usdhc_host_init
</UL>

<P><STRONG><a name="[1da]"></a>CLOCK_SetDiv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_usdhc.o(.text.CLOCK_SetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usdhc_clock_init
</UL>

<P><STRONG><a name="[1db]"></a>CLOCK_SetMux</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_usdhc.o(.text.CLOCK_SetMux))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usdhc_clock_init
</UL>

<P><STRONG><a name="[112]"></a>CardInformationLog</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, bsp_usdhc.o(.text.CardInformationLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CardInformationLog &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_test
</UL>

<P><STRONG><a name="[1d2]"></a>usdhc_clock_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_usdhc.o(.text.usdhc_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usdhc_clock_init &rArr; CLOCK_InitSysPfd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPfd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usdhc_host_init
</UL>

<P><STRONG><a name="[f3]"></a>ARM_MPU_Disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, board.o(.text.ARM_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[f4]"></a>ARM_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, board.o(.text.ARM_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[f9]"></a>CLOCK_GetDiv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(.text.CLOCK_GetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[f6]"></a>CLOCK_GetMux</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(.text.CLOCK_GetMux))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[f7]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, board.o(.text.CLOCK_GetOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[f1]"></a>CLOCK_SetDiv</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, clock_config.o(.text.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[ed]"></a>CLOCK_SetMux</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, clock_config.o(.text.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetMux
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[eb]"></a>CLOCK_SetRtcXtalFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_config.o(.text.CLOCK_SetRtcXtalFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[ec]"></a>CLOCK_SetXtalFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock_config.o(.text.CLOCK_SetXtalFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[104]"></a>CLOCK_ControlGate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pin_mux.o(.text.CLOCK_ControlGate))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[fb]"></a>CLOCK_EnableClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pin_mux.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[fd]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pin_mux.o(.text.IOMUXC_SetPinConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[fc]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pin_mux.o(.text.IOMUXC_SetPinMux))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[161]"></a>SDMMCHOST_ErrorRecovery</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_ErrorRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMCHOST_ErrorRecovery
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Reset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetPresentStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
</UL>

<P><STRONG><a name="[16c]"></a>SDMMCHOST_ExecuteStdTuning</STRONG> (Thumb, 228 bytes, Stack size 96 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_ExecuteStdTuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SDMMCHOST_ExecuteStdTuning &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Reset
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableStandardTuning
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_AdjustDelayForManualTuning
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_OSADelay
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetStandardTuningCounter
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetExecuteStdTuningStatus
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableAutoTuning
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_DisableInterruptStatus
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_CheckTuningError
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_CheckStdTuningResult
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteTuning
</UL>

<P><STRONG><a name="[167]"></a>SDMMCHOST_ReceiveTuningBlock</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, fsl_sdmmc_host.o(.text.SDMMCHOST_ReceiveTuningBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMCHOST_ReceiveTuningBlock &rArr; USDHC_SetDataConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetDataConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SendCommand
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Reset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadData
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetPresentStatusFlags
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableInterruptStatus
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableInternalDMA
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteManualTuning
</UL>

<P><STRONG><a name="[168]"></a>SDMMC_CheckTuningResult</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.SDMMC_CheckTuningResult))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteManualTuning
</UL>

<P><STRONG><a name="[189]"></a>UDSHC_SelectVoltage</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.UDSHC_SelectVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_SwitchToVoltage
</UL>

<P><STRONG><a name="[15d]"></a>USDHC_CardDetectByData3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_CardDetectByData3))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_CardDetectInit
</UL>

<P><STRONG><a name="[173]"></a>USDHC_CheckStdTuningResult</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_CheckStdTuningResult))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
</UL>

<P><STRONG><a name="[172]"></a>USDHC_CheckTuningError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_CheckTuningError))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
</UL>

<P><STRONG><a name="[180]"></a>USDHC_ClearInterruptStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_ClearInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ReceiveTuningBlock
</UL>

<P><STRONG><a name="[16b]"></a>USDHC_DisableInterruptStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_DisableInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteManualTuning
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
</UL>

<P><STRONG><a name="[16a]"></a>USDHC_EnableAutoTuning</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_EnableAutoTuning))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteManualTuning
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
</UL>

<P><STRONG><a name="[17c]"></a>USDHC_EnableInternalDMA</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_EnableInternalDMA))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ReceiveTuningBlock
</UL>

<P><STRONG><a name="[15e]"></a>USDHC_EnableInterruptStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_EnableInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_CardDetectInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ReceiveTuningBlock
</UL>

<P><STRONG><a name="[171]"></a>USDHC_GetExecuteStdTuningStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_GetExecuteStdTuningStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
</UL>

<P><STRONG><a name="[17f]"></a>USDHC_GetInterruptStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_GetInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ReceiveTuningBlock
</UL>

<P><STRONG><a name="[162]"></a>USDHC_GetPresentStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_GetPresentStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ReceiveTuningBlock
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ErrorRecovery
</UL>

<P><STRONG><a name="[181]"></a>USDHC_ReadData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ReceiveTuningBlock
</UL>

<P><STRONG><a name="[185]"></a>USDHC_SetDataBusWidth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_SetDataBusWidth))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_SetCardBusWidth
</UL>

<P><STRONG><a name="[16f]"></a>USDHC_SetStandardTuningCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(.text.USDHC_SetStandardTuningCounter))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteStdTuning
</UL>

<P><STRONG><a name="[15f]"></a>SDMMCHOST_EnableDDRMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_sd.o(.text.SDMMCHOST_EnableDDRMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMCHOST_EnableDDRMode
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableDDRMode
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
</UL>

<P><STRONG><a name="[175]"></a>SDMMCHOST_ForceClockOn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_sd.o(.text.SDMMCHOST_ForceClockOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMCHOST_ForceClockOn
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ForceClockOn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
</UL>

<P><STRONG><a name="[177]"></a>SDMMCHOST_GetSignalLineStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_sd.o(.text.SDMMCHOST_GetSignalLineStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMCHOST_GetSignalLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetPresentStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
</UL>

<P><STRONG><a name="[17b]"></a>SDMMCHOST_IsCardBusy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_sd.o(.text.SDMMCHOST_IsCardBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMCHOST_IsCardBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetPresentStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PollingCardStatusBusy
</UL>

<P><STRONG><a name="[182]"></a>SDMMCHOST_SendCardActive</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_sd.o(.text.SDMMCHOST_SendCardActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMCHOST_SendCardActive
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetCardActive
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[186]"></a>SDMMCHOST_SetCardClock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_sd.o(.text.SDMMCHOST_SetCardClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDMMCHOST_SetCardClock &rArr; USDHC_SetSdClock
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetSdClock
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
</UL>

<P><STRONG><a name="[18f]"></a>SD_AllSendCid</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, fsl_sd.o(.text.SD_AllSendCid))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SD_AllSendCid &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCid
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[192]"></a>SD_ApplicationSendOperationCondition</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, fsl_sd.o(.text.SD_ApplicationSendOperationCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SD_ApplicationSendOperationCondition &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_OSADelay
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProbeBusVoltage
</UL>

<P><STRONG><a name="[191]"></a>SD_DecodeCid</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_sd.o(.text.SD_DecodeCid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_DecodeCid
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>

<P><STRONG><a name="[1a8]"></a>SD_DecodeCsd</STRONG> (Thumb, 478 bytes, Stack size 8 bytes, fsl_sd.o(.text.SD_DecodeCsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_DecodeCsd
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
</UL>

<P><STRONG><a name="[1a9]"></a>SD_DecodeScr</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, fsl_sd.o(.text.SD_DecodeScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_DecodeScr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
</UL>

<P><STRONG><a name="[1a5]"></a>SD_DecodeStatus</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, fsl_sd.o(.text.SD_DecodeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
</UL>

<P><STRONG><a name="[19e]"></a>SD_ExecuteTuning</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_sd.o(.text.SD_ExecuteTuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SD_ExecuteTuning &rArr; SDMMCHOST_ExecuteTuning &rArr; SDMMCHOST_ExecuteStdTuning &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ExecuteTuning
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
</UL>

<P><STRONG><a name="[19f]"></a>SD_GoIdle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_sd.o(.text.SD_GoIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SD_GoIdle &rArr; SDMMC_GoIdle &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GoIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProbeBusVoltage
</UL>

<P><STRONG><a name="[1a1]"></a>SD_PollingCardStatusBusy</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fsl_sd.o(.text.SD_PollingCardStatusBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SD_PollingCardStatusBusy &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr;  SD_PollingCardStatusBusy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_OSADelay
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_IsCardBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
</UL>

<P><STRONG><a name="[195]"></a>SD_ProbeBusVoltage</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, fsl_sd.o(.text.SD_ProbeBusVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SD_ProbeBusVoltage &rArr; SD_ApplicationSendOperationCondition &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_SwitchToVoltage
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendInterfaceCondition
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GoIdle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[19c]"></a>SD_SelectBusTiming</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, fsl_sd.o(.text.SD_SelectBusTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SD_SelectBusTiming &rArr; SD_SelectFunction &rArr; SD_SwitchFunction &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ExecuteTuning
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_SetCardClock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_EnableDDRMode
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[1a6]"></a>SD_SelectFunction</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, fsl_sd.o(.text.SD_SelectFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SD_SelectFunction &rArr; SD_SwitchFunction &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
</UL>

<P><STRONG><a name="[193]"></a>SD_SendApplicationCmd</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_sd.o(.text.SD_SendApplicationCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendApplicationCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadStatus
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
</UL>

<P><STRONG><a name="[197]"></a>SD_SendCsd</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, fsl_sd.o(.text.SD_SendCsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SD_SendCsd &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCsd
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[1a3]"></a>SD_SendInterfaceCondition</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, fsl_sd.o(.text.SD_SendInterfaceCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SD_SendInterfaceCondition &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProbeBusVoltage
</UL>

<P><STRONG><a name="[196]"></a>SD_SendRca</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, fsl_sd.o(.text.SD_SendRca))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SD_SendRca &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[199]"></a>SD_SendScr</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, fsl_sd.o(.text.SD_SendScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SD_SendScr &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeScr
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[19b]"></a>SD_SetBlockSize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_sd.o(.text.SD_SetBlockSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_SetBlockSize &rArr; SDMMC_SetBlockSize &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SetBlockSize
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[19a]"></a>SD_SetDataBusWidth</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, fsl_sd.o(.text.SD_SetDataBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SD_SetDataBusWidth &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[1ac]"></a>SD_StopTransmission</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, fsl_sd.o(.text.SD_StopTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SD_StopTransmission &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
</UL>

<P><STRONG><a name="[1a7]"></a>SD_SwitchFunction</STRONG> (Thumb, 110 bytes, Stack size 96 bytes, fsl_sd.o(.text.SD_SwitchFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_SwitchFunction &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
</UL>

<P><STRONG><a name="[1a4]"></a>SD_SwitchVoltage</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, fsl_sd.o(.text.SD_SwitchVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SD_SwitchVoltage &rArr; SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_OSADelay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_SwitchToVoltage
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetCardPower
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_GetSignalLineStatus
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ForceClockOn
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProbeBusVoltage
</UL>

<P><STRONG><a name="[1ad]"></a>SD_Transfer</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, fsl_sd.o(.text.SD_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = SD_Transfer &rArr;  SD_PollingCardStatusBusy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PollingCardStatusBusy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ExecuteTuning
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
</UL>

<P><STRONG><a name="[1a2]"></a>SD_WaitWriteComplete</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, fsl_sd.o(.text.SD_WaitWriteComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SD_WaitWriteComplete &rArr; SD_Transfer &rArr;  SD_PollingCardStatusBusy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PollingCardStatusBusy
</UL>

<P><STRONG><a name="[176]"></a>USDHC_ForceClockOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_sd.o(.text.USDHC_ForceClockOn))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ForceClockOn
</UL>

<P><STRONG><a name="[178]"></a>USDHC_GetPresentStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_sd.o(.text.USDHC_GetPresentStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_IsCardBusy
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_GetSignalLineStatus
</UL>

<P><STRONG><a name="[1dd]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
